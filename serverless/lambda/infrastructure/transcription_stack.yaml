AWSTemplateFormatVersion: '2010-09-09'
Description: 'HelpPet AI - Audio transcription service with existing S3 bucket integration'

Parameters:
  ExistingBucketName:
    Type: String
    Description: Name of the existing S3 bucket for audio files
    Default: helppetai-visit-recordings
    
  WebhookEndpointUrl:
    Type: String
    Description: URL endpoint to POST transcription results
    Default: https://api.helppet.ai/api/v1/webhook/transcription/complete/by-s3-key
    
  WebhookSecretToken:
    Type: String
    Description: Secret token for webhook authentication
    Default: HelpPetWebhook2024
    NoEcho: true
    
  AnthropicApiKey:
    Type: String
    Description: Anthropic API key for SOAP extraction
    NoEcho: true
    
  ApiToken:
    Type: String
    Description: API token for calling HelpPet API
    NoEcho: true

Resources:
  # IAM Role for Audio Processor Lambda
  AudioProcessorRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: helppet-audio-processor-role
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: S3AccessPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:PutObject
                Resource:
                  - !Sub 'arn:aws:s3:::${ExistingBucketName}/*'
              - Effect: Allow
                Action:
                  - s3:ListBucket
                Resource:
                  - !Sub 'arn:aws:s3:::${ExistingBucketName}'
        - PolicyName: TranscribeAccessPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - transcribe:StartTranscriptionJob
                  - transcribe:GetTranscriptionJob
                  - transcribe:ListTranscriptionJobs
                  - transcribe:TagResource
                Resource: '*'

  # IAM Role for Transcription Complete Lambda
  TranscriptionCompleteRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: helppet-transcription-complete-role
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: TranscribeAccessPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - transcribe:GetTranscriptionJob
                  - transcribe:ListTagsForResource
                Resource: '*'
        - PolicyName: S3AccessPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:GetObject
                Resource: 
                  - 'arn:aws:s3:::aws-transcribe-*/*'
                  - !Sub 'arn:aws:s3:::${ExistingBucketName}/*'
              - Effect: Allow
                Action:
                  - s3:ListBucket
                Resource: 
                  - 'arn:aws:s3:::aws-transcribe-*'
                  - !Sub 'arn:aws:s3:::${ExistingBucketName}'
        - PolicyName: STSAccessPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - sts:GetCallerIdentity
                Resource: '*'

  # IAM Role for Transcript Processor Lambda
  TranscriptProcessorRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: helppet-transcript-processor-role
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: S3AccessPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:GetObject
                Resource:
                  - !Sub 'arn:aws:s3:::${ExistingBucketName}/transcripts/*'
              - Effect: Allow
                Action:
                  - s3:ListBucket
                Resource:
                  - !Sub 'arn:aws:s3:::${ExistingBucketName}'
        - PolicyName: TranscribeAccessPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - transcribe:GetTranscriptionJob
                  - transcribe:ListTagsForResource
                Resource: '*'
        - PolicyName: STSAccessPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - sts:GetCallerIdentity
                Resource: '*'

  # Lambda function for processing audio files
  AudioProcessorFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: helppet-audio-transcription-processor
      Runtime: python3.9
      Handler: audio_processor.lambda_handler
      Role: !GetAtt AudioProcessorRole.Arn
      Timeout: 300
      MemorySize: 256
      Environment:
        Variables:
          TRANSCRIPTION_OUTPUT_BUCKET: !Ref ExistingBucketName
      Code:
        ZipFile: |
          import json
          def lambda_handler(event, context):
              return {'statusCode': 200, 'body': json.dumps('Placeholder - deploy with actual code')}

  # Lambda function for handling transcription completion
  TranscriptionCompleteFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: helppet-transcription-complete-handler
      Runtime: python3.9
      Handler: transcription_complete_handler.lambda_handler
      Role: !GetAtt TranscriptionCompleteRole.Arn
      Timeout: 300
      MemorySize: 256
      Environment:
        Variables:
          WEBHOOK_ENDPOINT_URL: !Ref WebhookEndpointUrl
          WEBHOOK_SECRET_TOKEN: !Ref WebhookSecretToken
      Layers:
        - arn:aws:lambda:us-west-1:770693421928:layer:Klayers-p39-requests:19  # requests layer for us-west-1
      Code:
        ZipFile: |
          import json
          def lambda_handler(event, context):
              return {'statusCode': 200, 'body': json.dumps('Placeholder - deploy with actual code')}

  # Lambda function for processing transcript files and extracting SOAP data
  TranscriptProcessorFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: helppet-transcript-processor
      Runtime: python3.9
      Handler: transcript_processor.lambda_handler
      Role: !GetAtt TranscriptProcessorRole.Arn
      Timeout: 600  # 10 minutes for Anthropic API calls
      MemorySize: 512
      Environment:
        Variables:
          ANTHROPIC_API_KEY: !Ref AnthropicApiKey
          API_TOKEN: !Ref ApiToken
          API_BASE_URL: https://api.helppet.ai
      Code:
        ZipFile: |
          import json
          def lambda_handler(event, context):
              return {'statusCode': 200, 'body': json.dumps('Placeholder - deploy with actual code')}

  # Permission for existing S3 bucket to invoke Lambda
  S3InvokeLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref AudioProcessorFunction
      Action: lambda:InvokeFunction
      Principal: s3.amazonaws.com
      SourceAccount: !Ref 'AWS::AccountId'
      SourceArn: !Sub 'arn:aws:s3:::${ExistingBucketName}'

  # Permission for S3 bucket to invoke Transcript Processor Lambda
  S3InvokeTranscriptProcessorPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref TranscriptProcessorFunction
      Action: lambda:InvokeFunction
      Principal: s3.amazonaws.com
      SourceAccount: !Ref 'AWS::AccountId'
      SourceArn: !Sub 'arn:aws:s3:::${ExistingBucketName}'

  # Custom resource to add notification configuration to existing S3 bucket
  S3NotificationConfiguration:
    Type: AWS::CloudFormation::CustomResource
    Properties:
      ServiceToken: !GetAtt S3NotificationLambda.Arn
      BucketName: !Ref ExistingBucketName
      AudioProcessorLambdaArn: !GetAtt AudioProcessorFunction.Arn
      TranscriptProcessorLambdaArn: !GetAtt TranscriptProcessorFunction.Arn
      
  # Lambda function to configure S3 notification on existing bucket
  S3NotificationLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: S3NotificationPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:GetBucketNotification
                  - s3:PutBucketNotification
                Resource: 
                  - !Sub 'arn:aws:s3:::${ExistingBucketName}'

  S3NotificationLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: helppet-s3-notification-configurator
      Runtime: python3.9
      Handler: index.lambda_handler
      Role: !GetAtt S3NotificationLambdaRole.Arn
      Timeout: 60
      Code:
        ZipFile: |
          import json
          import boto3
          import cfnresponse
          import logging
          
          logger = logging.getLogger()
          logger.setLevel(logging.INFO)
          
          s3 = boto3.client('s3')
          
          def lambda_handler(event, context):
              logger.info(f"Event: {json.dumps(event)}")
              
              try:
                  bucket_name = event['ResourceProperties']['BucketName']
                  audio_processor_arn = event['ResourceProperties']['AudioProcessorLambdaArn']
                  transcript_processor_arn = event['ResourceProperties']['TranscriptProcessorLambdaArn']
                  
                  if event['RequestType'] == 'Create' or event['RequestType'] == 'Update':
                      # Get existing notification configuration
                      try:
                          response = s3.get_bucket_notification_configuration(Bucket=bucket_name)
                          existing_config = response
                      except s3.exceptions.NoSuchBucket:
                          logger.error(f"Bucket {bucket_name} not found")
                          cfnresponse.send(event, context, cfnresponse.FAILED, {}, "Bucket not found")
                          return
                      except Exception as e:
                          if 'NoSuchConfiguration' in str(e):
                              existing_config = {}
                          else:
                              raise
                      
                      # Add Lambda configuration
                      lambda_configs = existing_config.get('LambdaFunctionConfigurations', [])
                      
                      # Remove any existing configuration for our Lambdas to avoid duplicates
                      lambda_configs = [config for config in lambda_configs if config.get('LambdaFunctionArn') not in [audio_processor_arn, transcript_processor_arn]]
                      
                      # Add audio processor Lambda configuration
                      lambda_configs.append({
                          'Id': 'helppet-audio-transcription-trigger',
                          'LambdaFunctionArn': audio_processor_arn,
                          'Events': ['s3:ObjectCreated:*'],
                          'Filter': {
                              'Key': {
                                  'FilterRules': [
                                      {
                                          'Name': 'prefix',
                                          'Value': 'visit-recordings/'
                                      }
                                  ]
                              }
                          }
                      })
                      
                      # Add transcript processor Lambda configuration
                      lambda_configs.append({
                          'Id': 'helppet-transcript-processor-trigger',
                          'LambdaFunctionArn': transcript_processor_arn,
                          'Events': ['s3:ObjectCreated:*'],
                          'Filter': {
                              'Key': {
                                  'FilterRules': [
                                      {
                                          'Name': 'prefix',
                                          'Value': 'transcripts/'
                                      },
                                      {
                                          'Name': 'suffix',
                                          'Value': '.json'
                                      }
                                  ]
                              }
                          }
                      })
                      
                      # Update notification configuration
                      notification_config = {
                          'LambdaFunctionConfigurations': lambda_configs
                      }
                      
                      # Preserve existing configurations
                      if 'TopicConfigurations' in existing_config:
                          notification_config['TopicConfigurations'] = existing_config['TopicConfigurations']
                      if 'QueueConfigurations' in existing_config:
                          notification_config['QueueConfigurations'] = existing_config['QueueConfigurations']
                      
                      s3.put_bucket_notification_configuration(
                          Bucket=bucket_name,
                          NotificationConfiguration=notification_config
                      )
                      
                      logger.info(f"Successfully configured S3 notification for bucket {bucket_name}")
                      cfnresponse.send(event, context, cfnresponse.SUCCESS, {}, "Configuration updated")
                      
                  elif event['RequestType'] == 'Delete':
                      # Remove our Lambda configuration on stack deletion
                      try:
                          response = s3.get_bucket_notification_configuration(Bucket=bucket_name)
                          existing_config = response
                          
                          # Remove our Lambda configurations
                          lambda_configs = existing_config.get('LambdaFunctionConfigurations', [])
                          lambda_configs = [config for config in lambda_configs if config.get('LambdaFunctionArn') not in [audio_processor_arn, transcript_processor_arn]]
                          
                          notification_config = {}
                          if lambda_configs:
                              notification_config['LambdaFunctionConfigurations'] = lambda_configs
                          if 'TopicConfigurations' in existing_config:
                              notification_config['TopicConfigurations'] = existing_config['TopicConfigurations']
                          if 'QueueConfigurations' in existing_config:
                              notification_config['QueueConfigurations'] = existing_config['QueueConfigurations']
                          
                          s3.put_bucket_notification_configuration(
                              Bucket=bucket_name,
                              NotificationConfiguration=notification_config
                          )
                          
                          logger.info(f"Successfully removed S3 notification for bucket {bucket_name}")
                      except Exception as e:
                          logger.error(f"Error removing notification: {e}")
                          # Don't fail deletion if we can't clean up
                      
                      cfnresponse.send(event, context, cfnresponse.SUCCESS, {}, "Configuration removed")
                      
              except Exception as e:
                  logger.error(f"Error: {str(e)}")
                  cfnresponse.send(event, context, cfnresponse.FAILED, {}, str(e))

  # EventBridge Rule for Transcribe job completion
  TranscribeJobCompleteRule:
    Type: AWS::Events::Rule
    Properties:
      Name: helppet-transcribe-job-complete-rule
      Description: 'Capture AWS Transcribe job completion events for HelpPet'
      EventPattern:
        source:
          - aws.transcribe
        detail-type:
          - Transcribe Job State Change
        detail:
          TranscriptionJobStatus:
            - COMPLETED
            - FAILED
          # Optional: filter by job name pattern if needed
          # TranscriptionJobName:
          #   - prefix: "helppet-transcribe-"
      State: ENABLED
      Targets:
        - Arn: !GetAtt TranscriptionCompleteFunction.Arn
          Id: HelpPetTranscriptionCompleteTarget

  # Permission for EventBridge to invoke Lambda
  EventBridgeInvokeLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref TranscriptionCompleteFunction
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
      SourceArn: !GetAtt TranscribeJobCompleteRule.Arn

Outputs:
  AudioProcessorFunctionArn:
    Description: ARN of the audio processor Lambda function
    Value: !GetAtt AudioProcessorFunction.Arn
    Export:
      Name: !Sub "${AWS::StackName}-AudioProcessorArn"
    
  TranscriptionCompleteFunctionArn:
    Description: ARN of the transcription complete handler Lambda function
    Value: !GetAtt TranscriptionCompleteFunction.Arn
    Export:
      Name: !Sub "${AWS::StackName}-TranscriptionCompleteArn"
      
  TranscriptProcessorFunctionArn:
    Description: ARN of the transcript processor Lambda function
    Value: !GetAtt TranscriptProcessorFunction.Arn
    Export:
      Name: !Sub "${AWS::StackName}-TranscriptProcessorArn"
  
  EventBridgeRuleArn:
    Description: ARN of the EventBridge rule for transcription completion
    Value: !GetAtt TranscribeJobCompleteRule.Arn
    Export:
      Name: !Sub "${AWS::StackName}-EventBridgeRuleArn"
      
  WebhookEndpoint:
    Description: Webhook endpoint URL for transcription results
    Value: !Ref WebhookEndpointUrl
    Export:
      Name: !Sub "${AWS::StackName}-WebhookEndpoint"